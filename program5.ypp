/*
program5.ypp
COSC4785
Tyler O'Dowd
10/24/22

This is the input into the bison scanner to build a grammer tree from input
*/

%{
#include<FlexLexer.h>
#include<iostream>
using std::cerr;
using std::cout;
using std::endl;

#include "nodes.hpp"
#include "program5.hpp"
#include "SymbolTable.hpp"
#include "Entry.hpp"

extern Node* tree;
extern SymbolTable* root;
extern yyFlexLexer scanner;
extern int line;
#define yylex() scanner.yylex()

extern int col;
extern string err;
string errType;
extern SymbolTable* super;
extern SymbolTable* table;
extern SymbolTable* callup;
extern SymbolTable* blk;
extern SymbolTable* upper;
extern Entry* symbol;
extern Entry* func;
extern Type* prms;
bool newblk=true;
int counter=0;

void yyerror(const char*);

void printError(string msg) {
	cerr<<line<<": "<</*errorLine<<*/"\n"<<msg<<endl;
}

//returns the child error node, or self
Node* errorCheck(Node* n) {
//cerr<<n->getString()<<endl;
	Node* r;
	if((r=n->getLeft())&&(r->isErr())) {
		delete n;
		return r;
	}
	if((r=n->getRight())&&(r->isErr())) {
		delete n;
		return r;
	}
	if((r=n->getMid())&&(r->isErr())) {
		delete n;
		return r;
	}
	if((r=n->getLast())&&(r->isErr())) {
		delete n;
		return r;
	}
	if((r=n->getNext())&&(r->isErr())) {
		delete n;
		return r;
	}
	return n;
}

%}

%union {
  Node* ttype;
}
%define parse.error verbose
%token<ttype> INT IDENT
%token LPAREN RBRACK LBRACE RBRACE
%token ASSIGN COMMA DOT WHILE IF VOID NUL INTTYPE CLASS NEW THIS
%precedence RPAREN
%precedence ELSE
%token PRINT READ RETURN
%left NEQ EQ LEQ GEQ LT GT
%left PLUS MINUS OR
%left TIMES DIV MOD AND
%token LBRACK
%precedence UMINUS
%token SEMI NOT
%type<ttype> program vardec name type arglst cndtlstmt arglst2
%type<ttype> newexp id classdec vardecs optlexp
%type<ttype> constructdecs methoddecs constructdec methoddec classbody
%type<ttype> paramlist param block paramlist2 localvardecs
%type<ttype> stmts localvardec stmt bracketexps bracketexp multibracket
%type<ttype> exp multibrackets classstart

%%


program: classdec {
		tree=new Node($1);
		tree->set("<program> -> <classDeclaration>");
		$$=errorCheck($$);
	}
	| program classdec {
		$1->setNext(new Node($2));
		$1->getNext()->set("<program> -> <program> <classDec>");
		$$=errorCheck($$);
	}
	| error {
		if(tree==nullptr) {
			tree=new NodeERROR();
		}
		$$=new NodeERROR();
	}
;

classdec: classstart classbody {
		$$=$1;
		$1->setRight($2);
		$$=errorCheck($$);
	}
;

classstart: CLASS id LBRACE {
		$$=new Node($2);
		$$->set("<classDeclaration> -> CLASS ID <classBody>");
		$$->table=table;
    super->insert(table->id, table);
    super=table;
    //upper->insert(blk->id, blk);
    upper=new SymbolTable(upper);
    upper->id=symbol->id;
    upper->parent->insert(symbol->id, upper);
    symbol=nullptr;
    table=nullptr;
    ret=nullptr;
		prms=nullptr;
		blk=nullptr;
		$$=errorCheck($$);
	}
	| error id LBRACE {
		printError("Expected \'class\'");
		$$=new NodeERROR();
	}
	| CLASS id error {
		printError("Expected \'{\'");
		$$=new NodeERROR();
	}
;

classbody: RBRACE {
		$$=new Node();
		$$->set("<classBody> -> LBRACE RBRACE");
		$$=errorCheck($$);
		super=super->parent;
		upper=upper->parent;
	}
	| vardecs constructdecs methoddecs RBRACE {
		$$=new Node($1, $3, $2);
		string str="<classBody> -> LBRACE <varDeclaration> ";
		str+="<constructorDeclaration> <MethodDeclaration> RBRACE";
		$$->set(str);
		super=super->parent;
		upper=upper->parent;
		$$=errorCheck($$);
	}
	| constructdecs methoddecs RBRACE {
		$$=new Node($1, $2);
		string str="<classBody> -> LBRACE ";
		str+="<constructorDeclaration> <MethodDeclaration> RBRACE";
		$$->set(str);
		super=super->parent;
		upper=upper->parent;
		$$=errorCheck($$);
	}
	| vardecs methoddecs RBRACE {
		$$=new Node($1, $2);
		string str="<classBody> -> LBRACE <varDeclaration>";
		str+=" <MethodDeclaration> RBRACE";
		$$->set(str);
		super=super->parent;
		upper=upper->parent;
		$$=errorCheck($$);
	}
	| vardecs constructdecs RBRACE {
		$$=new Node($1, $2);
		string str="<classBody> -> LBRACE <varDeclaration> ";
		str+="<constructorDeclaration> RBRACE";
		$$->set(str);
		super=super->parent;
		upper=upper->parent;
		$$=errorCheck($$);
	}
	| vardecs RBRACE {
		$$=new Node($1);
		$$->set("<classBody> -> LBRACE <varDeclaration> RBRACE");
		super=super->parent;
		upper=upper->parent;
		$$=errorCheck($$);
	}
	| constructdecs RBRACE {
		$$=new Node($1);
		$$->set("<classBody> -> LBRACE <constructorDeclaration> RBRACE");
		super=super->parent;
		upper=upper->parent;
		$$=errorCheck($$);
	}
	| methoddecs RBRACE {
		$$=new Node($1);
		$$->set("<classBody> -> LBRACE <MethodDeclaration> RBRACE");
		super=super->parent;
		upper=upper->parent;
		$$=errorCheck($$);
	}
	| vardecs error {
		printError("Expected \'}\'");
		upper=upper->parent;
		$$=new NodeERROR();
	}
;

vardecs: vardecs vardec {
		$1->setNext($2);
	}
	| vardec {
		$$=$1;
	}
;
vardec: type id SEMI {
		$$=new Node($1, $2);
		super->insert(symbol->id, symbol);
		upper->insert(symbol->id, symbol);
		//clear the symbol after insertion to table
		symbol=nullptr;
		table=nullptr;
		ret=nullptr;
		prms=nullptr;
		$$->set("<varDeclaration> -> <type> ID SEMI");
		$$=errorCheck($$);
	}
  | type multibrackets id SEMI {
		//$$=new Node($1, $3, $2); /*IF NOT WORK FIX*/
		$$=new Node($1, $2);
		super->insert(symbol->id, symbol);
		upper->insert(symbol->id, symbol);
		//clear the symbol after insertion to table
		symbol=nullptr;
		table=nullptr;
		ret=nullptr;
		prms=nullptr;
		$$->set("<varDeclaration> -> <type> <multibrackets> ID SEMI");
		$$=errorCheck($$);
	}
;

constructdecs: constructdecs constructdec {
		$1->setNext($2);
	}
	| constructdec {
		$$=$1;
	}
;
constructdec: id LPAREN paramlist block {
		$$=new Node($1, $4, $3);
		string str="<constructorDeclaration> -> ID LPAREN <paramList> RPAREN";
		str+=" <block>";
		$$->set(str);
		$$->table=table;
		prms->rtn=nullptr;
		table->type=prms;
		/*
		if($4->table) {
      //super->copy($4->table);
      $4->table->copy(super);
		}*/
		super->insert(table->id, table);

		//upper=upper->parent;
    upper=upper->parent;

		table=nullptr;
		prms=nullptr;
		symbol=nullptr;
		ret=nullptr;
		blk=nullptr;
		$$=errorCheck($$);
	}
	| id error paramlist RPAREN block {
		printError("Expected \'(\'");
		$$=new NodeERROR();
	}
;

methoddecs: methoddecs methoddec {
		$1->setNext($2);
	}
	| methoddec {
		$$=$1;
	}
;

methoddec: type constructdec {
		$$=$2;
		Node* left=$$->getLeft();
		Node* mid=$$->getMid();
		Node* right=$$->getRight();
		$$->setLeft($1);
		$$->setMid(left);
		$$->setRight(mid);
		$$->setLast(right);
		string str="<methodDeclaration> -> <resultType> ID LPAREN <paramList>";
		str+=" RPAREN <block>";
		$$->set(str);
		prms->rtn=ret;
		$$=errorCheck($$);
  }
  | VOID constructdec {
		$$=$2;
		Node* left=$$->getLeft();
		Node* mid=$$->getMid();
		Node* right=$$->getRight();
		$$->setLeft(new Node());
		string str="<resultType> -> VOID";
		$$->getLeft()->set(str);
		$$->setMid(left);
		$$->setRight(mid);
		$$->setLast(right);
		str="<methodDeclaration> -> <resultType> ID LPAREN <paramList>";
		str+=" RPAREN <block>";
		$$->set(str);
		prms->rtn=ret;
		$$=errorCheck($$);
  }
;

paramlist: paramlist2 RPAREN {
		$$=$1;
		newblk=false;
	}
	| RPAREN {
		$$=new Node();
		prms=new Type();
		newblk=false;
		$$->set("<parameterList> -> EMPTYSTRING");
	}
;
paramlist2: paramlist2 COMMA param {
		string tmp=$1->getString();
		tmp+=" COMMA <parameter>";
		$1->set(tmp);
		Node* p=$1->getLeft();
		if(p->getNext()) {
			p->getNext();//this could be nullptr hence the if
			while(p->getNext()) {
				p=p->getNext();
			}
			p->setNext($3);
		}
		else {
			p->setNext($3);
		}
		prms->addParam(symbol);
		symbol=nullptr;
		//$$=errorCheck($$); //why wasnt this here before???
	}
	| param {
		$$=new Node($1);
		$$->set("<parameterList> -> <parameter>");
		if(prms) {
      //already exists from method
		}
		else {
      prms=new Type();
		}
		prms->addParam(symbol);
		symbol=nullptr;
		$$=errorCheck($$);
	}
	| paramlist2 error param {
		printError("Expected \',\'");
		$$=new NodeERROR();
	}
;
param: type id {
		$$=new Node($1, $2);
		$$->set("<parameter> -> <type> ID");
		$$=errorCheck($$);
	}
;

block: LBRACE localvardecs stmts RBRACE {
		$$=new Node($2, $3);
		$$->set("<block> -> LBRACE <localVarDeclaration>+ <statement>+ RBRACE");
    $$->table=super;
    super=super->parent;
    if(prms) {
      upper->type=prms;
    }
		if(table) {
      upper->id=table->id;
		}
		else {
      upper->id=".";
		}
		upper->parent->insert(upper->id, upper);
		$$=errorCheck($$);
	}
	| LBRACE localvardecs RBRACE {
		$$=new Node($2);
		$$->set("<block> -> LBRACE <localVarDeclaration>+ RBRACE");
    $$->table=super;
    super=super->parent;

    if(prms) {
      upper->type=prms;
    }
		if(table) {
      upper->id=table->id;
		}
		else {
      upper->id=".";
		}
		upper->parent->insert(upper->id, upper);
		$$=errorCheck($$);
	}
	| LBRACE stmts RBRACE {
		$$=new Node($2);
		$$->set("<block> -> LBRACE <statement>+ RBRACE");
		$$=errorCheck($$);
		super->insert(".", new SymbolTable(super));

	  upper=new SymbolTable(upper);
	  upper->insert(symbol->id, symbol);
    if(prms) {
      upper->type=prms;
    }
		if(table) {
      upper->id=table->id;
		}
		else {
      upper->id=".";
		}
		upper->parent->insert(upper->id, upper);
	}
	| LBRACE RBRACE {
		$$=new Node();
		$$->set("<block> -> LBRACE RBRACE");
		super->insert(".", new SymbolTable(super));

	  upper=new SymbolTable(upper);
    if(prms) {
      upper->type=prms;
    }
		if(table) {
      upper->id=table->id;
		}
		else {
      upper->id=".";
		}
		upper->parent->insert(upper->id, upper);
		$$=errorCheck($$);
	}
	| error localvardecs stmts RBRACE {
		printError("Expected \'{\'");
		$$=new NodeERROR();
	}
	| error localvardecs RBRACE {
		printError("Expected \'{\'");
		$$=new NodeERROR();
	}
	| error RBRACE {
		printError("Expected \'{\'");
		$$=new NodeERROR();
	}
;

localvardecs: localvardecs localvardec {
		Node* p=$1;
		if(p->getNext()) {
			p->getNext();//this could be nullptr hence the if
			while(p->getNext()) {
				p=p->getNext();
			}
			p->setNext($2);
		}
		else {
			p->setNext($2);
		}
		table->insert(symbol->id, symbol);
		upper->insert(symbol->id, symbol);
		symbol=nullptr;
	}
	| localvardec {
	  upper=new SymbolTable(upper);
	  upper->insert(symbol->id, symbol);
    super=new SymbolTable(super);
		table->insert(symbol->id, symbol);
		symbol=nullptr;
		$$=$1;
	}
;
localvardec: type id SEMI {
		$$=new Node($1, $2);
		$$->set("<localVarDeclaration> -> <type> ID SEMI");
		$$=errorCheck($$);
	}
	| type id error {
		printError("Expected \';\'");
		$$=new NodeERROR();
	}
;

stmts: stmts stmt {
		Node* p=$1;
		if(p->getNext()) {
			p->getNext();//this could be nullptr hence the if
			while(p->getNext()) {
				p=p->getNext();
			}
			p->setNext($2);
		}
		else {
			p->setNext($2);
		}
		p->table->next=$2->table;
		callup=nullptr;
	}
	| stmt {
		$$=$1;
		callup=nullptr;
	}
;
stmt: SEMI {
		$$=new Node();
		$$->set("<statement> -> SEMI");
	}
	| name ASSIGN exp SEMI {
		$$=new Node($1, $3);
		$$->set("<statement> -> <name> ASSIGN <expression> SEMI");
		$1->table->parent=$3->table;
		$3->table->insert(callup->id, callup);
		$$->table=$1->table;
		counter=0;
		callup=nullptr;
		$$=errorCheck($$);
	}
	| name LPAREN arglst RPAREN {
		$$=new Node($1, $3);
		$$->set("<statement> -> <name> LPAREN <argList> SEMI");
		$1->table->insert("params", $3->table);
		$3->table->parent=$1->table;
		callup->parent=$1->table;
		$$->table=$1->table;
		counter=0;
		callup=nullptr;
		$$=errorCheck($$);
	}
	| PRINT LPAREN arglst RPAREN SEMI {
		$$=new Node($3);
		$$->set("<statement> -> PRINT LPAREN <arglst> RPAREN");
		$$->table=new SymbolTable(super);
		$$->table->id="print";
		$$->table->call=$3->table;
		counter=0;
		callup=nullptr;
		$$=errorCheck($$);
	}
	| cndtlstmt {
		$$=new Node($1);
		$$->set("<statement> -> <conditionalStatement>");
		//super=super->parent;
		counter=0;
		$$=errorCheck($$);
	}
	| WHILE LPAREN exp RPAREN stmt {
		$$=new Node($3, $5);
		$$->set("<statement> -> WHILE LPAREN <expression> RPAREN <statement>");
    $$->table=new SymbolTable(super);
    $$->table->id="while";
    $$->table->next=$3->table;
    $$->table->call=$5->table;
		counter=0;
		$$=errorCheck($$);
	}
	| RETURN optlexp SEMI {
		$$=new Node($2);
		$$->set("<statement> -> RETURN <optionalStatement> SEMI");
		$$->table=new SymbolTable(super);
		$$->table->id="return";
		$$->table->call=$2->table;
		$$=errorCheck($$);
	}
	| block {
		$$=new Node($1);
		$$->set("<statement> -> <block>");
		$$->table=super;
		super=super->parent;
		super->insert(".", $$->table);
		upper->id=".";
		upper->type=nullptr;
    upper=upper->parent;
		$$=errorCheck($$);
	}
	| error LPAREN arglst RPAREN SEMI {
		printError("Expected \'print\'");
		$$=new NodeERROR();
	}
	| PRINT error arglst RPAREN SEMI {
		printError("Expected \'(\'");
		$$=new NodeERROR();
	}
	| PRINT LPAREN arglst RPAREN error {
		printError("Expected \';\'");
		$$=new NodeERROR();
	}
	| error LPAREN exp RPAREN stmt {
		printError("Expected \'while\'");
		$$=new NodeERROR();
	}
	| WHILE error exp RPAREN stmt {
		printError("Expected \'(\'");
		$$=new NodeERROR();
	}
	| WHILE LPAREN exp error stmt {
		printError("Expected \')\'");
		$$=new NodeERROR();
	}
;

name: THIS {
		$$=new Node();
		$$->set("<name> -> THIS");
		$$->table=new SymbolTable(super);
		$$->table->id=super->id;
		if(callup) {
		}
		else {
      callup=$$->table;
		}
	}
	| id {
		$$=new Node($1);
		$$->set("<name> -> ID");
		$$->table=new SymbolTable(super);
		$$->table->id=symbol->id;
		symbol=nullptr;
		if(callup) {
		}
		else {
      callup=$$->table;
		}
		$$=errorCheck($$);
	}
	| name DOT id {
		$$=new Node($1, $3);
		$$->set("<name> -> <name> DOT ID");
		$1->table->call=new SymbolTable($1->table);
		$1->table->call->id=symbol->id;
		symbol=nullptr;
		$$=errorCheck($$);
	}
	| name LBRACK exp RBRACK {
		$$=new Node($1, $3);
		$1->table->call=$3->table;
		$$->set("<name> -> <name> LBRACK <expression> RBRACK");
		$$=errorCheck($$);
	}
	| name error exp RBRACK {
		printError("Expected \'[\'");
		$$=new NodeERROR();
	}
	| name LBRACK exp error {
		printError("Expected \']\'");
		$$=new NodeERROR();
	}
	| error {
		printError("Expected valid name");
		$$=new NodeERROR();
	}
;

arglst: arglst2 {
		$$=$1;
	}
	| %empty {
		$$=new Node();
		$$->set("<argList> -> EMPTYSTRING");
		$$->table=new SymbolTable(super);
	}
;
arglst2: arglst2 COMMA exp {
		string tmp=$1->getString();
		tmp+=" COMMA <expression>";
		$1->set(tmp);
		Node* p=$1->getLeft();
		if(p->getNext()) {
			p->getNext();//this could be nullptr hence the if
			while(p->getNext()) {
				p=p->getNext();
			}
			p->setNext($3);
		}
		else {
			p->setNext($3);
		}
		//$1->table->next=$3->table;
		p->table->next=$3->table;
	}
	| exp {
		$$=new Node($1);
		$$->set("<argList> -> <expression>");
		$$->table=$1->table;
		$$=errorCheck($$);
	}
	| arglst2 error exp {
		printError("Expected \',\'");
		$$=new NodeERROR();
	}
;
cndtlstmt: IF LPAREN exp RPAREN stmt {
		$$=new Node($3, $5);
		string str="<conditionalStatement> -> IF LPAREN <expression> RPAREN";
		$$->set(str+" <statement>");
		$$->table=new SymbolTable(super);
		$$->table->call=$3->table;
		$$->table->id="if";
		//SymbolTable* tmp=$5->table;
		//str="statement";
		//$$->insert(str, tmp);
		$$->table->insert("statement", $5->table);
		$$=errorCheck($$);
	}
	| IF LPAREN exp RPAREN stmt ELSE stmt {
		$$=new Node($3, $7, $5);
		string str="<conditionalStatement> -> IF LPAREN <expression> RPAREN";
		$$->set(str+" <statement> ELSE <statement>");
		$$->table=new SymbolTable(super);
		$$->table->id="if";
		$$->table->call=$3->table;
		$$->table->insert("statement", $5->table);
		$$->table->insert("else", $7->table);
		$$=errorCheck($$);
	}
	/*
	| IF LPAREN exp error stmt {
		printError("Expected \')\'");
		$$=new NodeERROR();
	}*/
;

optlexp: %empty {
		$$=new Node();
		$$->set("<optionalExpression> -> EMPTYSTRING");
		$$->table=new SymbolTable(super);
		$$=errorCheck($$);
	}
	| exp {
		$$=new Node($1);
		$$->set("<optionalExpression -> <exp>");
		$$->table=$1->table;
		$$=errorCheck($$);
	}
;

newexp: NEW id LPAREN arglst RPAREN {
		$$=new Node($2, $4);
		$$->set("<newExpression> -> NEW ID LPAREN <argList> RPAREN");
		$$=errorCheck($$);
		$$->table=new SymbolTable(super);
		$$->table->id=symbol->id;
		$$->table->call=$4->table;
	}
	| NEW INTTYPE {
		$$=new Node();
		$$->set("<newExpression> -> NEW <simpleType>");
		$$->table=new SymbolTable(super);
		$$->table->id="int";
		$$=errorCheck($$);
	}
	| NEW INTTYPE bracketexps {
		$$=new Node($3);
		string str="<newExpression> -> NEW <simpleType> <LBRACK ";
		$$->set(str+"<expression> RBRACK>+");

		$$=errorCheck($$);
	}
	| NEW id bracketexps {
		$$=new Node($2, $3);
		string str="<newExpression> -> NEW <simpleType> <LBRACK ";
		$$->set(str+"<expression> RBRACK>+");
		$$=errorCheck($$);
	}
	| NEW INTTYPE bracketexps multibrackets {
		$$=new Node($3, $4);
		$$->set("<newExpression> -> NEW <simpleType> ");
		$$=errorCheck($$);
	}
	| NEW id bracketexps multibrackets {
		$$=new Node($3, $2, $4);
		$$->set("<newExpression> -> NEW <simpleType> ");
		$$=errorCheck($$);
	}
	| error id LPAREN arglst RPAREN {
			printError("Expected \'new\'");
			$$=new NodeERROR();
	}
	/*
	| NEW id error arglst RPAREN {
			printError("Expected \'(\'");
			$$=new NodeERROR();
	}*/
;
bracketexps: bracketexps bracketexp {
		Node* p=$1;
		if(p->getNext()) {
			p->getNext();//this could be nullptr hence the if
			while(p->getNext()) {
				p=p->getNext();
			}
			p->setNext($2);
		}
		else {
			p->setNext($2);
		}
		p->table->next=$2->table;
	}
	| bracketexp {
		$$=$1;
		$$->table=$1->table;
	}
;
bracketexp: LBRACK exp RBRACK {
		$$=new NodeNOSPACE($2);
		$$->set("<LBRACK <exp> RBRACK>");
		$$=errorCheck($$);
		$$->table=$2->table;
	}
;
multibrackets: multibrackets multibracket {
		Node* p=$1;
		if(p->getNext()) {
			//p->getNext();//this could be nullptr hence the if
			while(p->getNext()) {
				p=p->getNext();
			}
			p->setNext($2);
		}
		else {
			p->setNext($2);
		}
	}
	| multibracket {
		$$=$1;
	}
;
multibracket: LBRACK RBRACK {
		$$=new NodeNOSPACE();
		$$->set("<LBRACK RBRACK>");
	  symbol->dims++;
		$$=errorCheck($$);
	}
;

exp: name {
		$$=new Node($1);
		$$->set("<exp> -> <name>");
		$$=errorCheck($$);
		$$->table=$1->table;
	}
	| INT {
		const char* tmp=scanner.YYText();
		$$=new Node(new NodeINT(atoi(tmp)));
		$$->set("<exp> -> NUMBER");
		$$->table=new SymbolTable(super);
		$$->table->id="number";
		$$->table->value=$$->getLeft()->getInt();
		$$=errorCheck($$);
	}
	| NUL {
			$$=new Node();
			$$->set("<exp> -> null");
			$$->table=new SymbolTable(super);
			$$->table->id="null";
		}
	| READ LPAREN RPAREN {
			$$=new Node();
			$$->set("<exp> -> READ LPAREN RPAREN");
			$$->table=new SymbolTable(super);
			$$->table->id="read";
		}
	| name LPAREN arglst RPAREN {
		$$=new Node($1, $3);
		$$->set("<expression> -> <name> LPAREN <argList> RPAREN");
		$1->table->next=$3->table;
		$$->table=$1->table;
		$$=errorCheck($$);
	}
	| newexp {
		$$=new Node($1);
		$$->set("<expression> -> <newExpression>");
		$$=errorCheck($$);
		$$->table=$1->table;
	}
	| MINUS exp %prec UMINUS{
		$$=new Node($2);
		$$->set("<expression> -> MINUS <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="decrement";
		$$->table->call=$2->table;
		$$=errorCheck($$);
	}
	| PLUS exp %prec UMINUS{
		$$=new Node($2);
		$$->set("<expression> -> PLUS <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="increment";
		$$->table->call=$2->table;
		$$=errorCheck($$);
	}
	| NOT exp %prec UMINUS {
		$$=new Node($2);
		$$->set("<expression> -> NOT <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="not";
		$$->table->call=$2->table;
		$$=errorCheck($$);
	}
	| exp NEQ exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> NEQ <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="!=";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp EQ exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> EQ <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="==";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp LEQ exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> LEQ <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="<=";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp GEQ exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> GEQ <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id=">=";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp LT exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> LT <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="<";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp GT exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> GT <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id=">";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp AND exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> AND <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="&&";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp OR exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> OR <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="||";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp PLUS exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> PLUS <expression>");
		$$=errorCheck($$);
	}
	| exp MINUS exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> MINUS <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="-";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp TIMES exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> TIMES <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="*";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp DIV exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> DIV <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="/";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| exp MOD exp {
		$$=new Node($1, $3);
		$$->set("<expression> -> <expression> MOD <expression>");
		$$->table=new SymbolTable(super);
		$$->table->id="%";
		$$->table->next=$3->table;
		$1->table->call=$$->table;
		$$=errorCheck($$);
	}
	| LPAREN exp RPAREN {
		$$=new Node($2);
		$$->set("<exp> -> ( <exp> )");
		$$->table=new SymbolTable(super);
		$$->table->call=$2->table;
		$$=errorCheck($$);
	}
;

type: INTTYPE {
		$$=new Node();
		$$->set("<type> -> INT");
		if(symbol) {
      symbol->type="int";
		}
		else {
      symbol=new Entry();
      symbol->id="int";
      symbol->type=symbol->id;
		}
		if(ret) {
      //already exists
		}
		else {
      ret=symbol;
		}
		$$=errorCheck($$);
	}
  | id {
		$$=new Node($1);
		symbol->type=symbol->id;
		$$->set("<type> -> ID");
		if(ret) {
      //already exists
		}
		else {
      ret=symbol;
		}
		$$=errorCheck($$);
	}
;

id: IDENT {
		$$=new Node();
		string tmp=scanner.YYText();
		//its some sort of type or something, because the symbol hasnt been cleared
		if(symbol) {
      symbol->id=tmp;
		}
		else {
      symbol=new Entry();
      symbol->id=tmp;
		}
		if(table) {
      //already exists dont overwrite it
		}
		else {
      table=new SymbolTable(super);
      table->id=tmp;
		}
/*		$$->entry=new Entry();
		$$->entry->id=symbol->id;
		$$->entry->type=symbol->type;
		$$->table=table;*/
		tmp="ID -> "+tmp;
		$$->set(tmp);
	}
;
%%
